name: Deploy Firebase Functions Manually

on:
  workflow_dispatch:

jobs:
  deploy_functions:
    name: Deploy Functions
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Create firebaseConfig.json for Project ID extraction
        run: echo '${{ secrets.FIREBASE_CONFIG_JSON }}' > src/firebaseConfig.json

      - name: Install jq and Extract Project ID
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          PROJECT_ID=$(jq -r '.projectId' src/firebaseConfig.json)
          if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" == "null" ]; then
            echo "Error: projectId could not be extracted from FIREBASE_CONFIG_JSON."
            exit 1
          fi
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_AGENT_WEB_UI }}

      - name: Prepare Python Env
        working-directory: ./functions
        run: |
          python3.11 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test Python Authentication Directly  
        env:  
          # Use the project ID from GITHUB_ENV or hardcode if you prefer  
          PROJECT_ID_FOR_TEST: grant-matching-agent # Or ${{ env.PROJECT_ID }}  
          # This comes from the google-github-actions/auth step  
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}  
        working-directory: ./functions # So it can find the venv  
        run: |  
          echo "Attempting Python authentication test..."  
          echo "GOOGLE_APPLICATION_CREDENTIALS is set to: $GOOGLE_APPLICATION_CREDENTIALS"  
          echo "PROJECT_ID_FOR_TEST is set to: $PROJECT_ID_FOR_TEST"  
          source venv/bin/activate  
          python -c "  
import os  
import firebase_admin  
from firebase_admin import credentials, firestore  
  
print(f'GAC env var: {os.environ.get(\"GOOGLE_APPLICATION_CREDENTIALS\")}')  
print(f'GCP env var: {os.environ.get(\"GOOGLE_CLOUD_PROJECT\")}') # Check if this is needed/set  
  
try:  
    # Explicitly initialize with project ID if relying on ADC  
    # For service accounts, GOOGLE_APPLICATION_CREDENTIALS should be enough for google.auth.default()  
    # If GOOGLE_CLOUD_PROJECT is also set in env, firebase_admin.initialize_app() should pick it up.  
    if not firebase_admin._apps:  
        # Initialize with the project ID to be certain,  
        # it will use GOOGLE_APPLICATION_CREDENTIALS for auth.  
        firebase_admin.initialize_app(options={  
            'projectId': os.environ.get('PROJECT_ID_FOR_TEST')  
        })  
      
    db = firestore.client()  
    print(f'Successfully initialized Firestore client for project: {db.project}')  
    print('Python authentication test PASSED.')  
except Exception as e:  
    print(f'Python authentication test FAILED: {e}')  
    exit(1)  
"  
      - name: Deploy Firebase Functions  
        env:  
          # This is the crucial one for google.auth.default()  
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}  
          # Set GOOGLE_CLOUD_PROJECT, which firebase-admin SDK prefers  
          GOOGLE_CLOUD_PROJECT: grant-matching-agent # Or ${{ env.PROJECT_ID }}  
          # GCLOUD_PROJECT is an older alias, sometimes still checked.  
          GCLOUD_PROJECT: grant-matching-agent       # Or ${{ env.PROJECT_ID }}  
        working-directory: ./ # Assuming firebase.json is at the root  
        run: |  
            echo "--- Environment for Firebase Deploy ---"  
            echo "GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS"  
            echo "GOOGLE_CLOUD_PROJECT: $GOOGLE_CLOUD_PROJECT"  
            echo "GCLOUD_PROJECT: $GCLOUD_PROJECT"  
            echo "Current directory: $(pwd)"  
            ls -la # Show files in current directory, check for firebase.json  
            echo "---------------------------------------"  
              
            echo "Deploying Functions to project: $GOOGLE_CLOUD_PROJECT"  
            firebase deploy --only functions --project "$GOOGLE_CLOUD_PROJECT" --debug  

      - name: Clean up config file
        if: always()
        run: rm -f src/firebaseConfig.json
