name: Deploy Firebase Functions Manually

on:
  workflow_dispatch:

jobs:
  deploy_functions:
    name: Deploy Functions
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Firebase CLI
        run: npm install -g firebase-tools

      - name: Create firebaseConfig.json for Project ID extraction
        run: echo '${{ secrets.FIREBASE_CONFIG_JSON }}' > src/firebaseConfig.json

      - name: Install jq and Extract Project ID
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          PROJECT_ID=$(jq -r '.projectId' src/firebaseConfig.json)
          if [ -z "$PROJECT_ID" ] || [ "$PROJECT_ID" == "null" ]; then
            echo "Error: projectId could not be extracted from FIREBASE_CONFIG_JSON."
            exit 1
          fi
          echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV

      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_AGENT_WEB_UI }}

      - name: Configure Google ADC  
        run: |  
          mkdir -p ~/.config/gcloud  
          cp "${{ steps.auth.outputs.credentials_file_path }}" ~/.config/gcloud/application_default_credentials.json  
    
      - name: Prepare Python Env
        working-directory: ./functions
        run: |
          python3.11 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Add environment secrets to .env  
        env:  
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}  
          DEEPINFRA_API_KEY: ${{ secrets.DEEPINFRA_API_KEY }}  
          GITH_TOKEN: ${{ secrets.GITH_TOKEN }}
          SECRETS: "OPENAI_API_KEY,DEEPINFRA_API_KEY,GITH_TOKEN" # Comma separated list of your secrets  
        working-directory: ./functions
        run: |  
          touch .env
          for SECRET in $(echo $SECRETS | sed "s/,/ /g")  
          do  
            # Check if the secret is GITH_TOKEN and rename it to GITHUB_TOKEN  
            if [ "$SECRET" = "GITH_TOKEN" ]; then  
              OUTPUT_SECRET_NAME="GITHUB_TOKEN"  
            else  
              OUTPUT_SECRET_NAME="$SECRET"  
            fi  
            # Append the secret to the .env file  
            echo "${OUTPUT_SECRET_NAME}=${!SECRET}" >> .env
          done
          
          
      - name: Deploy Firebase Functions  
        env:  
          # This is the crucial one for google.auth.default()  
          GOOGLE_APPLICATION_CREDENTIALS: ${{ steps.auth.outputs.credentials_file_path }}  
          # Set GOOGLE_CLOUD_PROJECT, which firebase-admin SDK prefers  
          GOOGLE_CLOUD_PROJECT: grant-matching-agent # Or ${{ env.PROJECT_ID }}  
          # GCLOUD_PROJECT is an older alias, sometimes still checked.  
          GCLOUD_PROJECT: grant-matching-agent       # Or ${{ env.PROJECT_ID }} 
          PROJECT_ID: grant-matching-agent
        working-directory: ./ # Assuming firebase.json is at the root  
        run: |  
            echo "--- Environment for Firebase Deploy ---"  
            echo "GOOGLE_APPLICATION_CREDENTIALS: $GOOGLE_APPLICATION_CREDENTIALS"  
            echo "GOOGLE_CLOUD_PROJECT: $GOOGLE_CLOUD_PROJECT"  
            echo "GCLOUD_PROJECT: $GCLOUD_PROJECT"  
            echo "Current directory: $(pwd)"  
            ls -la # Show files in current directory, check for firebase.json  
            echo "---------------------------------------"  
              
            echo "Deploying Functions to project: $GOOGLE_CLOUD_PROJECT"  
            firebase deploy --only functions --project "$GOOGLE_CLOUD_PROJECT"

      - name: Clean up config file
        if: always()
        run: rm -f src/firebaseConfig.json
