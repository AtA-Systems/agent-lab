# .github/workflows/deploy-my-fork.yml
name: Deploy Fork to My Firebase Hosting

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'
      channelId:
        description: 'Firebase Hosting channel ID (e.g., live, staging, or empty for preview)'
        required: false
        default: 'live'

jobs:
  build_and_deploy_fork:
    # This job runs if the FIREBASE_CONFIG_JSON secret is set (and not an empty string).
    # If the secret is not set or is an empty string, it's falsy, and the job is skipped.
    if: ${{ secrets.FIREBASE_CONFIG_JSON }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout specific branch from fork
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: Create Firebase Config file and Extract Project ID
        id: setup_firebase
        env:
          # Pass the secret as an environment variable for safer handling in the script
          FIREBASE_CONFIG_JSON_FROM_SECRET: ${{ secrets.FIREBASE_CONFIG_JSON }}
        run: |
          echo "Attempting to create firebaseConfig.json and extract projectId..."
          # This script only runs if the job-level 'if' condition passed,
          # meaning FIREBASE_CONFIG_JSON_FROM_SECRET should have a value.
          # The job 'if' already checks secrets.FIREBASE_CONFIG_JSON.
          if [ -z "$FIREBASE_CONFIG_JSON_FROM_SECRET" ]; then
            echo "Error: FIREBASE_CONFIG_JSON_FROM_SECRET is unexpectedly empty."
            echo "This implies the job's 'if' condition based on secrets.FIREBASE_CONFIG_JSON might not be working as expected or the secret is truly empty."
            exit 1
          fi

          mkdir -p src # Ensure the src directory exists
          echo "$FIREBASE_CONFIG_JSON_FROM_SECRET" > src/firebaseConfig.json

          PROJECT_ID_VALUE=$(echo "$FIREBASE_CONFIG_JSON_FROM_SECRET" | jq -r .projectId)

          if [ -z "$PROJECT_ID_VALUE" ] || [ "$PROJECT_ID_VALUE" == "null" ]; then
            echo "Error: projectId not found or is null in FIREBASE_CONFIG_JSON."
            exit 1
          fi
          echo "Extracted PROJECT_ID: ${PROJECT_ID_VALUE}"
          echo "PROJECT_ID=${PROJECT_ID_VALUE}" >> $GITHUB_ENV
          echo "project_id_extracted=${PROJECT_ID_VALUE}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Install Dependencies and Build
        run: |
          npm install
          npm run build

      - name: Deploy to My Firebase Hosting
        # This step runs if:
        # 1. FIREBASE_SERVICE_ACCOUNT_AGENT_WEB_UI secret is set (and not empty).
        # 2. env.PROJECT_ID (from previous step) is set (and not empty).
        # 3. steps.setup_firebase.outputs.project_id_extracted is set (and not empty).
        if: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_AGENT_WEB_UI && env.PROJECT_ID && steps.setup_firebase.outputs.project_id_extracted }}
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: '${{ secrets.GITHUB_TOKEN }}' # Using single quotes here for consistency, though ${{...}} is fine.
          firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_AGENT_WEB_UI }}'
          channelId: ${{ github.event.inputs.channelId }}
          projectId: ${{ env.PROJECT_ID }}  